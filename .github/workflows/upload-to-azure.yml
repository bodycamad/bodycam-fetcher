name: Upload to Azure (manual or after daily-bodycam-fetch)

# ───────────────────────────────────────────────────────────────
# 1) daily-bodycam-fetch 워크플로우가 완료되면 자동 실행
# 2) 수동으로 이미 끝난 daily-bodycam-fetch에서 아티팩트를 가져와 실행
on:
  workflow_run:
    workflows: ["daily-bodycam-fetch"]
    types: [completed]

  workflow_dispatch:
    inputs:
      source_run_id:
        description: "daily-bodycam-fetch 워크플로우의 run ID (숫자)"
        required: true
      artifact_name:
        description: "가져올 아티팩트 이름 (예: bodycam-bundle-25)"
        required: true

permissions:
  contents: read    # download-artifact가 다른 워크플로우 아티팩트를 가져오기 위해 필요합니다.

jobs:
  upload-and-index:
    runs-on: ubuntu-latest

    steps:
      # 1) 레포지토리 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2) daily-bodycam-fetch에서 생성된 아티팩트를 다운로드
      - name: Download bodycam artifact from daily-bodycam-fetch
        uses: actions/download-artifact@v3
        with:
          # 자동 트리거(workflow_run) vs. 수동(workflow_dispatch) 분기
          run-id: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.id || github.event.inputs.source_run_id }}
          name:   ${{ github.event_name == 'workflow_run' && format('bodycam-bundle-{0}', github.event.workflow_run.run_number) || github.event.inputs.artifact_name }}
          path: data

      # 3) Azure 로그인 (AZURE_CREDENTIALS는 GitHub Secrets에 저장되어 있어야 함)
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 4) Blob Storage에 data/ 폴더 업로드 (기존에 업로드된 것은 덮어쓰지 않음)
      - name: Upload data/ to Blob Storage (skip existing)
        run: |
          az storage blob upload-batch \
            --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT }} \
            --destination ${{ secrets.AZURE_CONTAINER_NAME }} \
            --source ./data \
            --auth-mode login \
            --overwrite false \
            --no-progress

      # (선택) 업로드된 Blob 목록 출력해 보기 (디버깅용)
      - name: List uploaded blobs
        run: |
          az storage blob list \
            --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT }} \
            --container-name ${{ secrets.AZURE_CONTAINER_NAME }} \
            --query "[].{name:name}" \
            -o table

      # 5) Video Indexer용 토큰 발급
      - name: Generate Video Indexer access token
        id: generate_token
        run: |
          VI_TOKEN=$(curl -s -G \
            "https://api.videoindexer.ai/${{ secrets.AZURE_VI_LOCATION }}/Accounts/${{ secrets.AZURE_VI_ACCOUNT_ID }}/AccessToken" \
            --data-urlencode "allowEdit=true" \
            -H "Ocp-Apim-Subscription-Key: ${{ secrets.AZURE_VI_SUBSCRIPTION_KEY }}" )
          echo "vi_token=$VI_TOKEN" >> $GITHUB_OUTPUT

      # 6) 업로드된 Blob을 Video Indexer에 인덱싱 요청
      - name: Index each uploaded blob in Video Indexer
        run: |
          set -e
          blobs=$(az storage blob list \
            --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT }} \
            --container-name ${{ secrets.AZURE_CONTAINER_NAME }} \
            --query "[].name" -o tsv)

          for name in $blobs; do
            echo "Indexing blob: $name"
            BLOB_URL="https://${{ secrets.AZURE_STORAGE_ACCOUNT }}.blob.core.windows.net/${{ secrets.AZURE_CONTAINER_NAME }}/$name"
            SAFE_NAME=$(basename "$name" | sed 's/ /%20/g')

            curl -X POST \
              "https://api.videoindexer.ai/${{ secrets.AZURE_VI_LOCATION }}/Accounts/${{ secrets.AZURE_VI_ACCOUNT_ID }}/Videos?name=${SAFE_NAME}&privacy=Private&videoUrl=${BLOB_URL}" \
              -H "Authorization: Bearer ${{ steps.generate_token.outputs.vi_token }}" \
              -H "Content-Type: application/json" \
              --fail \
              --silent \
              --show-error

            echo " → Requested indexing for: $name"
          done
