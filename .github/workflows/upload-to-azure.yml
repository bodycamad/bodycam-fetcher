name: Upload to Azure (manual trigger or after daily-bodycam-fetch)

# ───────────────────────────────────────────────────────────────
# 1) workflow_run(=daily-bodycam-fetch 완료) 트리거
# 2) workflow_dispatch(=수동실행) 트리거
on:
  # 1) daily-bodycam-fetch가 성공(completed)했을 때 자동 실행
  workflow_run:
    workflows: ["daily-bodycam-fetch"]
    types: [completed]

  # 2) 이미 끝난 run-id를 지정해서 수동 실행할 수 있도록
  workflow_dispatch:
    inputs:
      source_run_id:
        description: "daily-bodycam-fetch 워크플로우의 run ID (숫자)"
        required: true
      artifact_name:
        description: "가져올 아티팩트 이름 (예: bodycam-bundle-123)"
        required: true

# 이 워크플로우가 이전 워크플로우 아티팩트를 내려받으려면 contents 읽기 권한이 필요합니다.
permissions:
  contents: read

jobs:
  upload-and-index:
    runs-on: ubuntu-latest

    steps:
      # 1) 레포지토리 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2) 최신 bodycam 아티팩트(=data 폴더) 다운로드
      #    daily-bodycam-fetch 워크플로우에서 만든 아티팩트 이름과 동일해야 합니다.
      - name: Download bodycam artifact
        uses: actions/download-artifact@v2
        with:
          # run-id: “자동 트리거일 때” vs. “수동 트리거일 때” 구분
          run-id: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.id || github.event.inputs.source_run_id }}
          name: ${{ github.event_name == 'workflow_run' && format('bodycam-bundle-{0}', github.event.workflow_run.run_number) || github.event.inputs.artifact_name }}
          path: data

      # 3) Azure 로그인 (AZURE_CREDENTIALS를 미리 GitHub Secrets에 등록해 두었다고 가정)
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 4) Blob Storage에 data/ 폴더 업로드 (이미 존재하는 blob은 건너뜀)
      - name: Upload entire data/ folder to Blob Storage (skip existing)
        run: |
          az storage blob upload-batch \
            --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT }} \
            --destination ${{ secrets.AZURE_CONTAINER_NAME }} \
            --source ./data \
            --auth-mode login \
            --overwrite false \
            --no-progress

      # 5) (선택) 업로드된 blob 목록 조회
      - name: List uploaded blobs
        run: |
          az storage blob list \
            --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT }} \
            --container-name ${{ secrets.AZURE_CONTAINER_NAME }} \
            --query "[].{name:name}" \
            -o table

      # ──────────────────────────────
      # 6) Video Indexer용 Token 발급
      - name: Generate Video Indexer access token
        id: generate_token
        run: |
          VI_TOKEN=$(curl -s -G \
            "https://api.videoindexer.ai/${{ secrets.AZURE_VI_LOCATION }}/Accounts/${{ secrets.AZURE_VI_ACCOUNT_ID }}/AccessToken" \
            --data-urlencode "allowEdit=true" \
            -H "Ocp-Apim-Subscription-Key: ${{ secrets.AZURE_VI_SUBSCRIPTION_KEY }}" )
          echo "vi_token=$VI_TOKEN" >> $GITHUB_OUTPUT

      # 7) 업로드된 Blob마다 Video Indexer 인덱싱 요청
      - name: Index each uploaded blob in Video Indexer
        run: |
          set -e

          # 7-1) 컨테이너 내 Blob 이름 목록을 가져온다
          blobs=$(az storage blob list \
            --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT }} \
            --container-name ${{ secrets.AZURE_CONTAINER_NAME }} \
            --query "[].name" -o tsv)

          for name in $blobs; do
            echo "Indexing blob: $name"

            # 퍼블릭 컨테이너라면 URL만으로 접근 가능하다.
            BLOB_URL="https://${{ secrets.AZURE_STORAGE_ACCOUNT }}.blob.core.windows.net/${{ secrets.AZURE_CONTAINER_NAME }}/$name"

            # 비디오 이름에 공백이 있다면 URL 인코딩
            SAFE_NAME=$(basename "$name" | sed 's/ /%20/g')

            # 7-2) Video Indexer 인덱싱 요청 (POST)
            curl -X POST \
              "https://api.videoindexer.ai/${{ secrets.AZURE_VI_LOCATION }}/Accounts/${{ secrets.AZURE_VI_ACCOUNT_ID }}/Videos?name=${SAFE_NAME}&privacy=Private&videoUrl=${BLOB_URL}" \
              -H "Authorization: Bearer ${{ steps.generate_token.outputs.vi_token }}" \
              -H "Content-Type: application/json" \
              --fail \
              --silent \
              --show-error

            echo " → Requested indexing for: $name"
          done
