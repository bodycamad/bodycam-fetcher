# .github/workflows/upload-to-azure.yml
name: Upload to Azure (manual)

on:
  workflow_dispatch:
    inputs:
      run_id:
        description: 'daily-bodycam-fetch Run ID'
        required: true
        type: number
      artifact_name:
        description: '(선택) 다운로드할 Artifact 이름'
        required: false
        type: string

permissions:
  actions: read
  contents: read

jobs:
  upload-and-index:
    runs-on: ubuntu-latest

    steps:
    # 0) 리포지토리 체크아웃 -------------------------------------------------
    - uses: actions/checkout@v4

    # 1) 해당 run 에 들어있는 아티팩트 목록 출력(옵션)
    - name: Show artifacts in that run
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        gh api \
          repos/${{ github.repository }}/actions/runs/${{ inputs.run_id }}/artifacts \
          --paginate -q '.artifacts[] | "\(.name) (id:\(.id))"'

    # 2-A) artifact_name 이 **존재**할 때
    - name: Download single artifact
      if: inputs.artifact_name != ''
      uses: actions/download-artifact@v4
      with:
        run-id: ${{ inputs.run_id }}
        name:   ${{ inputs.artifact_name }}
        path:   ./downloaded_data

    # 2-B) artifact_name 이 **없을** 때 → 전부 다운로드
    - name: Download all artifacts
      if: inputs.artifact_name == ''
      uses: actions/download-artifact@v4
      with:
        run-id: ${{ inputs.run_id }}
        path:   ./downloaded_data

    # 3) Azure 로그인 -------------------------------------------------------
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # 4) Blob Storage 로 중복 없이 업로드 ----------------------------------
    - name: Upload to Azure Blob
      run: |
        az storage blob upload-batch \
          --account-name   "${{ secrets.AZURE_STORAGE_ACCOUNT }}" \
          --account-key    "${{ secrets.AZURE_STORAGE_KEY }}" \
          --destination    "${{ secrets.AZURE_STORAGE_CONTAINER }}" \
          --source         "./downloaded_data" \
          --if-none-match="*"
        echo "▶ Blob 업로드 완료"

    # 5) Video Indexer 트리거 ----------------------------------------------
    - name: Trigger Azure Video Indexer
      env:
        VI_LOCATION:    ${{ secrets.VIDEO_INDEXER_LOCATION }}
        VI_ACCOUNT_ID:  ${{ secrets.VIDEO_INDEXER_ACCOUNT_ID }}
        VI_API_KEY:     ${{ secrets.VIDEO_INDEXER_API_KEY }}
        AZ_ACCOUNT:     ${{ secrets.AZURE_STORAGE_ACCOUNT }}
        AZ_CONTAINER:   ${{ secrets.AZURE_STORAGE_CONTAINER }}
        AZ_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_KEY }}
      run: |
        ACCESS_TOKEN=$(az rest --method get \
          --uri "https://api.videoindexer.ai/Auth/$VI_LOCATION/Accounts/$VI_ACCOUNT_ID/AccessToken?allowEdit=true" \
          --headers "Ocp-Apim-Subscription-Key:$VI_API_KEY" -o tsv)

        # 컨테이너 내 blob 이름만 깔끔히 추출
        for BLOB in $(az storage blob list \
            --account-name   "$AZ_ACCOUNT" \
            --account-key    "$AZ_STORAGE_KEY" \
            --container-name "$AZ_CONTAINER" \
            --query '[].name' -o tsv); do

          [[ $BLOB =~ \.(mp4|mov|m4a|wav)$ ]] || continue

          VIDEO_URL="https://$AZ_ACCOUNT.blob.core.windows.net/$AZ_CONTAINER/$BLOB"
          echo "• Indexing $VIDEO_URL"

          az rest --method post \
            --uri "https://api.videoindexer.ai/$VI_LOCATION/Accounts/$VI_ACCOUNT_ID/Videos" \
            --headers "Content-Type:application/json" \
            --body "{\"accessToken\":\"$ACCESS_TOKEN\",\"name\":\"$(basename "$BLOB")\",\"videoUrl\":\"$VIDEO_URL\"}" \
            --output none

          sleep 2   # 과도한 동시 요청 방지
        done
        echo "▶ Video Indexer 요청 완료"
